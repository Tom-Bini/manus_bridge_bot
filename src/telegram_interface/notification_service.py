"""
Module pour le syst√®me de notification du bot crypto.
Ce module permet d'envoyer des notifications via Telegram lorsque des transactions sont effectu√©es.
"""
import logging
from typing import Dict, List, Optional, Any, Callable
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

class NotificationService:
    """Service de notification pour le bot crypto."""
    
    def __init__(self):
        """Initialise le service de notification."""
        self.callbacks = []
    
    def register_callback(self, callback: Callable[[str, Optional[Dict[str, Any]]], None]) -> None:
        """
        Enregistre une fonction de callback pour les notifications.
        
        Args:
            callback: Fonction √† appeler lors d'une notification
        """
        self.callbacks.append(callback)
    
    def send_notification(self, message: str, transaction_data: Optional[Dict[str, Any]] = None) -> None:
        """
        Envoie une notification via tous les callbacks enregistr√©s.
        
        Args:
            message: Message de notification
            transaction_data: Donn√©es de la transaction (optionnel)
        """
        for callback in self.callbacks:
            try:
                callback(message, transaction_data)
            except Exception as e:
                logger.error(f"Erreur lors de l'envoi de la notification: {e}")
    
    def notify_transaction_started(self, wallet_address: str, from_chain: str, to_chain: str, 
                                 token_symbol: str, amount: str) -> None:
        """
        Envoie une notification de d√©but de transaction.
        
        Args:
            wallet_address: Adresse du wallet
            from_chain: Cha√Æne source
            to_chain: Cha√Æne de destination
            token_symbol: Symbole du token
            amount: Montant de la transaction
        """
        message = (
            f"üîÑ Transaction d√©marr√©e\n\n"
            f"Wallet: {wallet_address}\n"
            f"De: {from_chain}\n"
            f"Vers: {to_chain}\n"
            f"Token: {token_symbol}\n"
            f"Montant: {amount}"
        )
        
        transaction_data = {
            "wallet_address": wallet_address,
            "from_chain": from_chain,
            "to_chain": to_chain,
            "token_symbol": token_symbol,
            "amount": amount,
            "status": "started",
            "timestamp": datetime.now().isoformat()
        }
        
        self.send_notification(message, transaction_data)
    
    def notify_transaction_completed(self, transaction_data: Dict[str, Any]) -> None:
        """
        Envoie une notification de fin de transaction.
        
        Args:
            transaction_data: Donn√©es de la transaction
        """
        message = (
            f"‚úÖ Transaction r√©ussie\n\n"
            f"Service: {transaction_data.get('bridge_type')}\n"
            f"De: {transaction_data.get('from_chain')}\n"
            f"Vers: {transaction_data.get('to_chain')}\n"
            f"Token: {transaction_data.get('from_token')} ‚Üí {transaction_data.get('to_token')}\n"
            f"Montant: {transaction_data.get('amount')}"
        )
        
        self.send_notification(message, transaction_data)
    
    def notify_transaction_failed(self, transaction_data: Dict[str, Any], error_message: str) -> None:
        """
        Envoie une notification d'√©chec de transaction.
        
        Args:
            transaction_data: Donn√©es de la transaction
            error_message: Message d'erreur
        """
        message = (
            f"‚ùå Transaction √©chou√©e\n\n"
            f"Service: {transaction_data.get('bridge_type')}\n"
            f"De: {transaction_data.get('from_chain')}\n"
            f"Vers: {transaction_data.get('to_chain')}\n"
            f"Token: {transaction_data.get('from_token')} ‚Üí {transaction_data.get('to_token')}\n"
            f"Montant: {transaction_data.get('amount')}\n"
            f"Erreur: {error_message}"
        )
        
        # Mettre √† jour le statut
        transaction_data["status"] = "failed"
        transaction_data["error"] = error_message
        
        self.send_notification(message, transaction_data)
    
    def notify_wallet_balance_updated(self, wallet_address: str, balances: Dict[str, Dict[str, float]]) -> None:
        """
        Envoie une notification de mise √† jour des soldes d'un wallet.
        
        Args:
            wallet_address: Adresse du wallet
            balances: Soldes par cha√Æne et par token
        """
        message = f"üí∞ Soldes mis √† jour pour {wallet_address}\n\n"
        
        for chain_id, tokens in balances.items():
            message += f"Cha√Æne: {chain_id}\n"
            for token_symbol, balance in tokens.items():
                message += f"  {token_symbol}: {balance}\n"
            message += "\n"
        
        self.send_notification(message, {
            "wallet_address": wallet_address,
            "balances": balances,
            "timestamp": datetime.now().isoformat()
        })
    
    def notify_system_status(self, status_message: str) -> None:
        """
        Envoie une notification de statut du syst√®me.
        
        Args:
            status_message: Message de statut
        """
        message = f"‚ÑπÔ∏è Statut du syst√®me\n\n{status_message}"
        
        self.send_notification(message, {
            "type": "system_status",
            "message": status_message,
            "timestamp": datetime.now().isoformat()
        })
